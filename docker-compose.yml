version: '3.8'

services:
  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SERVER_PORT=8080
      - SERVER_HOST=0.0.0.0
      - MONGO_URI=mongodb://mongodb:27017
      - MONGO_DATABASE=ai_government_consultant
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      - JWT_SECRET=your-jwt-secret-change-in-production
      - LLM_API_KEY=your-llm-api-key
      - LLM_PROVIDER=gemini
      - NEWS_API_KEY=your-news-api-key
      - NEWS_API_BASE_URL=https://newsapi.org/v2
      - RESEARCH_LLM_MODEL=gemini-2.0-flash
      - RESEARCH_MAX_CONCURRENT_REQUESTS=5
      - RESEARCH_REQUEST_TIMEOUT=30
      - RESEARCH_CACHE_ENABLED=true
      - RESEARCH_CACHE_TTL=3600
      - RESEARCH_DEFAULT_LANGUAGE=en
      - RESEARCH_MAX_SOURCES_PER_QUERY=20
      - RESEARCH_MIN_CREDIBILITY_SCORE=0.6
      - RESEARCH_MIN_RELEVANCE_SCORE=0.5
    depends_on:
      - mongodb
      - redis
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB database
  mongodb:
    image: mongo:7.0
    # SECURITY: Only expose to localhost for production
    # For development, you can use "27017:27017" to allow external access
    # For production, use "127.0.0.1:27017:27017" to restrict to localhost only
    ports:
      - "127.0.0.1:27017:27017"  # Restrict to localhost only
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=ai_government_consultant
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - app-network
    restart: unless-stopped
    command: >
      mongod 
      --auth 
      --bind_ip_all 
      --port 27017
      --logpath /var/log/mongodb/mongod.log
      --logappend
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis cache
  redis:
    image: redis:7.2-alpine
    # SECURITY: Only expose to localhost for production
    # For development, you can use "6379:6379" to allow external access
    # For production, use "127.0.0.1:6379:6379" to restrict to localhost only
    ports:
      - "127.0.0.1:6379:6379"  # Restrict to localhost only
    command: >
      redis-server 
      --appendonly yes 
      --requirepass password
      --bind 0.0.0.0
      --protected-mode yes
      --port 6379
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "password", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Express (for development)
  mongo-express:
    image: mongo-express:1.0.2
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_URL=mongodb://admin:password@mongodb:27017/
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin
    depends_on:
      - mongodb
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - dev

  # Redis Commander (for development)
  redis-commander:
    image: rediscommander/redis-commander:latest
    ports:
      - "8082:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379:0:password
    depends_on:
      - redis
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - dev

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  app-network:
    driver: bridge